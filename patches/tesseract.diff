diff --git a/src/api/baseapi.cpp b/src/api/baseapi.cpp
index f78894c..7ff3c14 100644
--- a/src/api/baseapi.cpp
+++ b/src/api/baseapi.cpp
@@ -23,6 +23,10 @@
 #  include "config_auto.h"
 #endif
 
+#if defined(__EMSCRIPTEN__)
+#undef HAVE_LIBCURL
+#endif
+
 #include "boxword.h"    // for BoxWord
 #include "coutln.h"     // for C_OUTLINE_IT, C_OUTLINE_LIST
 #include "dawg_cache.h" // for DawgCache
diff --git a/src/arch/simddetect.cpp b/src/arch/simddetect.cpp
index 8c8605c..8a48934 100644
--- a/src/arch/simddetect.cpp
+++ b/src/arch/simddetect.cpp
@@ -31,6 +31,10 @@
 #undef HAVE_FRAMEWORK_ACCELERATE
 #endif
 
+#if defined(__EMSCRIPTEN__)
+#undef HAVE_FRAMEWORK_ACCELERATE
+#endif
+
 #if defined(HAVE_FRAMEWORK_ACCELERATE)
 
 // Use Apple Accelerate framework.
@@ -41,8 +45,10 @@
 #endif
 
 #if defined(HAVE_AVX) || defined(HAVE_AVX2) || defined(HAVE_FMA) || defined(HAVE_SSE4_1)
+#if !defined(__EMSCRIPTEN__)
 #  define HAS_CPUID
 #endif
+#endif
 
 #if defined(HAS_CPUID)
 #  if defined(__GNUC__)
diff --git a/src/ccmain/pagesegmain.cpp b/src/ccmain/pagesegmain.cpp
index f3edc81..33eac9c 100644
--- a/src/ccmain/pagesegmain.cpp
+++ b/src/ccmain/pagesegmain.cpp
@@ -224,7 +224,7 @@ int Tesseract::AutoPageSeg(PageSegMode pageseg_mode, BLOCK_LIST *blocks, TO_BLOC
     }
 #endif // ndef DISABLED_LEGACY_ENGINE
     result = finder->FindBlocks(pageseg_mode, scaled_color_, scaled_factor_, to_block,
-                                photomask_pix, pix_thresholds_, pix_grey_, &pixa_debug_,
+                                photomask_pix, pix_thresholds_, pix_grey_, pixa_debug_.get(),
                                 &found_blocks, diacritic_blobs, to_blocks);
     if (result >= 0) {
       finder->GetDeskewVectors(&deskew_, &reskew_);
@@ -281,17 +281,17 @@ ColumnFinder *Tesseract::SetupPageSegAndDetectOrientation(PageSegMode pageseg_mo
   ICOORD bleft(0, 0);
 
   ASSERT_HOST(pix_binary_ != nullptr);
-  if (tessedit_dump_pageseg_images) {
-    pixa_debug_.AddPix(pix_binary_, "PageSegInput");
+  if (tessedit_dump_pageseg_images && pixa_debug_) {
+    pixa_debug_->AddPix(pix_binary_, "PageSegInput");
   }
   // Leptonica is used to find the rule/separator lines in the input.
   LineFinder::FindAndRemoveLines(source_resolution_, textord_tabfind_show_vlines, pix_binary_,
                                  &vertical_x, &vertical_y, music_mask_pix, &v_lines, &h_lines);
-  if (tessedit_dump_pageseg_images) {
-    pixa_debug_.AddPix(pix_binary_, "NoLines");
+  if (tessedit_dump_pageseg_images && pixa_debug_) {
+    pixa_debug_->AddPix(pix_binary_, "NoLines");
   }
   // Leptonica is used to find a mask of the photo regions in the input.
-  *photo_mask_pix = ImageFind::FindImages(pix_binary_, &pixa_debug_);
+  *photo_mask_pix = ImageFind::FindImages(pix_binary_, pixa_debug_.get());
   if (tessedit_dump_pageseg_images) {
     Image pix_no_image_ = nullptr;
     if (*photo_mask_pix != nullptr) {
@@ -299,7 +299,7 @@ ColumnFinder *Tesseract::SetupPageSegAndDetectOrientation(PageSegMode pageseg_mo
     } else {
       pix_no_image_ = pix_binary_.clone();
     }
-    pixa_debug_.AddPix(pix_no_image_, "NoImages");
+    pixa_debug_->AddPix(pix_no_image_, "NoImages");
     pix_no_image_.destroy();
   }
   if (!PSM_COL_FIND_ENABLED(pageseg_mode)) {
diff --git a/src/ccmain/tesseractclass.cpp b/src/ccmain/tesseractclass.cpp
index 1eabcc5..d4fee4f 100644
--- a/src/ccmain/tesseractclass.cpp
+++ b/src/ccmain/tesseractclass.cpp
@@ -481,8 +481,10 @@ Dict &Tesseract::getDict() {
 }
 
 void Tesseract::Clear() {
-  std::string debug_name = imagebasename + "_debug.pdf";
-  pixa_debug_.WritePDF(debug_name.c_str());
+  if (pixa_debug_) {
+    std::string debug_name = imagebasename + "_debug.pdf";
+    pixa_debug_->WritePDF(debug_name.c_str());
+  }
   pix_binary_.destroy();
   pix_grey_.destroy();
   pix_thresholds_.destroy();
@@ -566,7 +568,7 @@ void Tesseract::PrepareForPageseg() {
   // the newly split image.
   splitter_.set_orig_pix(pix_binary());
   splitter_.set_pageseg_split_strategy(max_pageseg_strategy);
-  if (splitter_.Split(true, &pixa_debug_)) {
+  if (splitter_.Split(true, pixa_debug_.get())) {
     ASSERT_HOST(splitter_.splitted_image());
     pix_binary_.destroy();
     pix_binary_ = splitter_.splitted_image().clone();
@@ -593,7 +595,7 @@ void Tesseract::PrepareForTessOCR(BLOCK_LIST *block_list, Tesseract *osd_tess, O
   splitter_.set_segmentation_block_list(block_list);
   splitter_.set_ocr_split_strategy(max_ocr_strategy);
   // Run the splitter for OCR
-  bool split_for_ocr = splitter_.Split(false, &pixa_debug_);
+  bool split_for_ocr = splitter_.Split(false, pixa_debug_.get());
   // Restore pix_binary to the binarized original pix for future reference.
   ASSERT_HOST(splitter_.orig_pix());
   pix_binary_.destroy();
diff --git a/src/ccmain/tesseractclass.h b/src/ccmain/tesseractclass.h
index 94681ab..68cc910 100644
--- a/src/ccmain/tesseractclass.h
+++ b/src/ccmain/tesseractclass.h
@@ -984,7 +984,7 @@ private:
   // Thresholds that were used to generate the thresholded image from grey.
   Image pix_thresholds_;
   // Debug images. If non-empty, will be written on destruction.
-  DebugPixa pixa_debug_;
+  std::unique_ptr<DebugPixa> pixa_debug_;
   // Input image resolution after any scaling. The resolution is not well
   // transmitted by operations on Pix, so we keep an independent record here.
   int source_resolution_;
